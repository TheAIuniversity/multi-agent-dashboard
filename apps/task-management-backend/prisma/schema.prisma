// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  owner
  admin
  member
  viewer
}

enum TaskStatus {
  todo
  in_progress
  done
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum ProjectStatus {
  active
  archived
  completed
}

enum NotificationType {
  task_assigned
  task_updated
  task_completed
  comment_added
  project_invitation
  mention
}

enum ActivityAction {
  created
  updated
  deleted
  assigned
  completed
  commented
}

// Core Models
model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String    @unique @db.VarChar(255)
  passwordHash   String    @map("password_hash") @db.VarChar(255)
  name           String    @db.VarChar(100)
  avatarUrl      String?   @map("avatar_url") @db.VarChar(500)
  emailVerified  Boolean   @default(false) @map("email_verified")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  refreshTokens       RefreshToken[]
  ownedOrganizations  Organization[]     @relation("OrganizationOwner")
  teamMemberships     TeamMember[]
  projectMemberships  ProjectMember[]
  createdProjects     Project[]          @relation("ProjectCreator")
  assignedTasks       Task[]             @relation("TaskAssignee")
  createdTasks        Task[]             @relation("TaskCreator")
  comments            TaskComment[]
  attachments         TaskAttachment[]   @relation("AttachmentUploader")
  activities          Activity[]
  notifications       Notification[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash") @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(200)
  description String?  @db.Text
  ownerId     String   @map("owner_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  owner    User      @relation("OrganizationOwner", fields: [ownerId], references: [id])
  teams    Team[]
  projects Project[]

  @@map("organizations")
}

model Team {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  name           String   @db.VarChar(200)
  description    String?  @db.Text
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]

  @@map("teams")
}

model TeamMember {
  teamId   String   @map("team_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  role     UserRole @default(member)
  joinedAt DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("team_members")
}

model Project {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  name           String        @db.VarChar(200)
  description    String?       @db.Text
  status         ProjectStatus @default(active)
  createdBy      String        @map("created_by") @db.Uuid
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  organization Organization?   @relation(fields: [organizationId], references: [id])
  creator      User            @relation("ProjectCreator", fields: [createdBy], references: [id])
  members      ProjectMember[]
  tasks        Task[]

  @@map("projects")
}

model ProjectMember {
  projectId String   @map("project_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      UserRole @default(member)
  joinedAt  DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String       @map("project_id") @db.Uuid
  title       String       @db.VarChar(200)
  description String?      @db.Text
  status      TaskStatus   @default(todo)
  priority    TaskPriority @default(medium)
  assigneeId  String?      @map("assignee_id") @db.Uuid
  dueDate     DateTime?    @map("due_date") @db.Timestamptz(6)
  createdBy   String       @map("created_by") @db.Uuid
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User             @relation("TaskCreator", fields: [createdBy], references: [id])
  comments    TaskComment[]
  attachments TaskAttachment[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId    String   @map("task_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([createdAt])
  @@map("task_comments")
}

model TaskAttachment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId     String   @map("task_id") @db.Uuid
  filename   String   @db.VarChar(255)
  fileUrl    String   @map("file_url") @db.VarChar(500)
  fileSize   Int?     @map("file_size")
  mimeType   String?  @map("mime_type") @db.VarChar(100)
  uploadedBy String   @map("uploaded_by") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  task     Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader User @relation("AttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("task_attachments")
}

model Activity {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String         @map("user_id") @db.Uuid
  action     ActivityAction
  entityType String         @map("entity_type") @db.VarChar(50)
  entityId   String         @map("entity_id") @db.Uuid
  metadata   Json?
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("activities")
}

model Notification {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String           @map("user_id") @db.Uuid
  type       NotificationType
  title      String           @db.VarChar(200)
  message    String           @db.Text
  read       Boolean          @default(false)
  entityType String?          @map("entity_type") @db.VarChar(50)
  entityId   String?          @map("entity_id") @db.Uuid
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@map("notifications")
}